// ignore_for_file: slash_for_doc_comments, unnecessary_new, non_constant_identifier_names, constant_identifier_names, unnecessary_this, empty_constructor_bodies, annotate_overrides, unnecessary_null_comparison, prefer_collection_literals, no_leading_underscores_for_local_identifiers, unused_import, prefer_interpolation_to_compose_strings

/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library nebula_graph.src.auth_response;

import 'dart:typed_data' show Int8List;
import 'package:nebula_dart_gdbc/gen/nebula_graph/nebula_graph.dart';
import 'package:nebula_dart_gdbc/gen/nebula/nebula.dart' as t_nebula;

class AuthResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AuthResponse");
  static final TField _ERROR_CODE_FIELD_DESC =
      new TField("error_code", TType.I32, 1);
  static final TField _ERROR_MSG_FIELD_DESC =
      new TField("error_msg", TType.STRING, 2);
  static final TField _SESSION_ID_FIELD_DESC =
      new TField("session_id", TType.I64, 3);
  static final TField _TIME_ZONE_OFFSET_SECONDS_FIELD_DESC =
      new TField("time_zone_offset_seconds", TType.I32, 4);
  static final TField _TIME_ZONE_NAME_FIELD_DESC =
      new TField("time_zone_name", TType.STRING, 5);

  int? _error_code;
  static const int ERROR_CODE = 1;
  Int8List? _error_msg;
  static const int ERROR_MSG = 2;
  int? _session_id;
  static const int SESSION_ID = 3;
  int? _time_zone_offset_seconds;
  static const int TIME_ZONE_OFFSET_SECONDS = 4;
  Int8List? _time_zone_name;
  static const int TIME_ZONE_NAME = 5;

  bool __isset_error_code = false;
  bool __isset_session_id = false;
  bool __isset_time_zone_offset_seconds = false;

  AuthResponse() {}

  // error_code
  int? get error_code => this._error_code;

  set error_code(int? error_code) {
    this._error_code = error_code;
    this.__isset_error_code = true;
  }

  bool isSetError_code() => this.__isset_error_code;

  unsetError_code() {
    this.__isset_error_code = false;
  }

  // error_msg
  Int8List? get error_msg => this._error_msg;

  set error_msg(Int8List? error_msg) {
    this._error_msg = error_msg;
  }

  bool isSetError_msg() => this.error_msg != null;

  unsetError_msg() {
    this.error_msg = null;
  }

  // session_id
  int? get session_id => this._session_id;

  set session_id(int? session_id) {
    this._session_id = session_id;
    this.__isset_session_id = true;
  }

  bool isSetSession_id() => this.__isset_session_id;

  unsetSession_id() {
    this.__isset_session_id = false;
  }

  // time_zone_offset_seconds
  int? get time_zone_offset_seconds => this._time_zone_offset_seconds;

  set time_zone_offset_seconds(int? time_zone_offset_seconds) {
    this._time_zone_offset_seconds = time_zone_offset_seconds;
    this.__isset_time_zone_offset_seconds = true;
  }

  bool isSetTime_zone_offset_seconds() => this.__isset_time_zone_offset_seconds;

  unsetTime_zone_offset_seconds() {
    this.__isset_time_zone_offset_seconds = false;
  }

  // time_zone_name
  Int8List? get time_zone_name => this._time_zone_name;

  set time_zone_name(Int8List? time_zone_name) {
    this._time_zone_name = time_zone_name;
  }

  bool isSetTime_zone_name() => this.time_zone_name != null;

  unsetTime_zone_name() {
    this.time_zone_name = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ERROR_CODE:
        return this.error_code;
      case ERROR_MSG:
        return this.error_msg;
      case SESSION_ID:
        return this.session_id;
      case TIME_ZONE_OFFSET_SECONDS:
        return this.time_zone_offset_seconds;
      case TIME_ZONE_NAME:
        return this.time_zone_name;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ERROR_CODE:
        if (value == null) {
          unsetError_code();
        } else {
          this.error_code = value as int?;
        }
        break;

      case ERROR_MSG:
        if (value == null) {
          unsetError_msg();
        } else {
          this.error_msg = value as Int8List?;
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSession_id();
        } else {
          this.session_id = value as int?;
        }
        break;

      case TIME_ZONE_OFFSET_SECONDS:
        if (value == null) {
          unsetTime_zone_offset_seconds();
        } else {
          this.time_zone_offset_seconds = value as int?;
        }
        break;

      case TIME_ZONE_NAME:
        if (value == null) {
          unsetTime_zone_name();
        } else {
          this.time_zone_name = value as Int8List?;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ERROR_CODE:
        return isSetError_code();
      case ERROR_MSG:
        return isSetError_msg();
      case SESSION_ID:
        return isSetSession_id();
      case TIME_ZONE_OFFSET_SECONDS:
        return isSetTime_zone_offset_seconds();
      case TIME_ZONE_NAME:
        return isSetTime_zone_name();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ERROR_CODE:
          if (field.type == TType.I32) {
            this.error_code = iprot.readI32();
            this.__isset_error_code = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ERROR_MSG:
          if (field.type == TType.STRING) {
            this.error_msg = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SESSION_ID:
          if (field.type == TType.I64) {
            this.session_id = iprot.readI64();
            this.__isset_session_id = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TIME_ZONE_OFFSET_SECONDS:
          if (field.type == TType.I32) {
            this.time_zone_offset_seconds = iprot.readI32();
            this.__isset_time_zone_offset_seconds = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TIME_ZONE_NAME:
          if (field.type == TType.STRING) {
            this.time_zone_name = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!__isset_error_code) {
      throw new TProtocolError(
          TProtocolErrorType.UNKNOWN,
          "Required field 'error_code' was not found in serialized data! Struct: " +
              toString());
    }

    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ERROR_CODE_FIELD_DESC);
    oprot.writeI32(this.error_code);
    oprot.writeFieldEnd();
    if (isSetError_msg()) {
      if (this.error_msg != null) {
        oprot.writeFieldBegin(_ERROR_MSG_FIELD_DESC);
        oprot.writeBinary(this.error_msg);
        oprot.writeFieldEnd();
      }
    }
    if (isSetSession_id()) {
      oprot.writeFieldBegin(_SESSION_ID_FIELD_DESC);
      oprot.writeI64(this.session_id);
      oprot.writeFieldEnd();
    }
    if (isSetTime_zone_offset_seconds()) {
      oprot.writeFieldBegin(_TIME_ZONE_OFFSET_SECONDS_FIELD_DESC);
      oprot.writeI32(this.time_zone_offset_seconds);
      oprot.writeFieldEnd();
    }
    if (isSetTime_zone_name()) {
      if (this.time_zone_name != null) {
        oprot.writeFieldBegin(_TIME_ZONE_NAME_FIELD_DESC);
        oprot.writeBinary(this.time_zone_name);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AuthResponse(");

    ret.write("error_code:");
    String? error_code_name =
        t_nebula.ErrorCode.VALUES_TO_NAMES[this.error_code];
    if (error_code_name != null) {
      ret.write(error_code_name);
      ret.write(" (");
    }
    ret.write(this.error_code);
    if (error_code_name != null) {
      ret.write(")");
    }

    if (isSetError_msg()) {
      ret.write(", ");
      ret.write("error_msg:");
      if (this.error_msg == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    if (isSetSession_id()) {
      ret.write(", ");
      ret.write("session_id:");
      ret.write(this.session_id);
    }

    if (isSetTime_zone_offset_seconds()) {
      ret.write(", ");
      ret.write("time_zone_offset_seconds:");
      ret.write(this.time_zone_offset_seconds);
    }

    if (isSetTime_zone_name()) {
      ret.write(", ");
      ret.write("time_zone_name:");
      if (this.time_zone_name == null) {
        ret.write("null");
      } else {
        ret.write("BINARY");
      }
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // alas, we cannot check 'error_code' because it's a primitive and you chose the non-beans generator.
    // check that fields of type enum have valid values
    if (isSetError_code() &&
        !t_nebula.ErrorCode.VALID_VALUES.contains(error_code)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN,
          "The field 'error_code' has been assigned the invalid value $error_code");
    }
  }
}
